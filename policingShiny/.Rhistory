x[1]
x[[1]]
class(x[1])
class(x[[1]])
sapply(x, "[", 2)
x[2]
sapply(x, "+", 2)
x
x[1]
x[1][1]
x[1][[1]]
x
class(x)
class(x[1])
x[1]
class(x[[1]])
x[1]
x[1][1]
x[[1]][1]
xl <- list(1:3,4:6,list(7:9,10:12))
x1
xl
xl[3][[2]][3]
xl[0]
xl[3]
xl[3][[2]]
xl[[3]][[2]]
class(xl[3])
class(cl[[3]])
class(xl[[3]])
dfm <- data.frame(x = 1:3, y = I(matrix(1:9, nrow = 3)))
data.frame(x=1:3,y=4:6)
str(dfm)
dfl
dfm
str(dfm)
matrix(1:9, nrow = 3)
dfl <- data.frame(x = 1:3, y = I(list(1:2, 1:3, 1:4)))
str(dfl)
dfl[[2]]
dfl[[2]][[1]]
dfl[[2]][[1]][1]
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
f <- function(x) {
10
}
f(stop("This is an error!"))
f <- function(x) {10}
f(stop("This is an error!"))
f <- function(x) {force(x);10}
f(stop("This is an error!"))
f <- function(x = ls()) {a <- 1;x}
f()
f(ls())
f1 <- function(x = {y <- 1; 2}, y = 0) {
x + y
}
f1()
f1 <- function(x = {y <- 1; 2}, y = 0) {
environment(x)
x + y
}
f1()
f1 <- function(x = {y <- 1; 2}, y = 0) {
print(environment(x))
x + y
}
f1()
environment(f1)
environment(x)
f1()
f1(y = 2)
f1(y = 3)
f1 <- function(x = {y <- 1; 2}, y = 0) {
x + y
}
f1(y = 5)
?grepl
x <- 1:5; y <- 4
grepl(x, 4)
grepl(4, x)
x[grepl(4, x)]
`%like%` <- function(vec, str) {
return grepl(str, vec)
}
`%like%` <- function(vec, str) {
grepl(str, vec)
}
x[x %like% 4]
x <- c("abc","cde","fgh")
x[x %like% "a"]
x[x %like% "c"]
`%like%` <- function(vec, str) {
grep(str, vec)
}
x[x %like% "c"]
`%like%` <- function(vec, str) {
grepl(str, vec)
}
grepl(c("a","c"), x)
x[grepl(c("a","c"), x)]
`%mlike%` <- function(vec, strvec) {
length(strvec) != 1 || stop("Search vector has length = 1, use %like% instead")
}
x %mlike% "c"
x %mlike% c("c","a")
?warning
x[x %like% "c"]
x[x %mike% "c"]
x[x %mlike% "c"]
`%mlike%` <- function(vec, strvec) {
length(strvec) != 1 || (warning("Search vector has length = 1, using %like% instead"))
}
x[x %mlike% "c"]
`%mlike%` <- function(vec, strvec) {
length(strvec) != 1 || warning("Search vector has length = 1, using %like% instead")
}
x[x %like% "c"]
x[x %mlike% "c"]
`%mlike%` <- function(vec, strvec) {
length(strvec) != 1 || stop("Search vector has length = 1, using %like% instead")
}
x[x %mlike% "c"]
x[x %mlike% "c"]
sapply(x, grepl)
sapply(x, grepl(c("a","b")))
?grepl
sapply(c("a","c"), grepl(x))
x <- c("abc","cde","fgh")
sapply(c("a","c"), grepl(x))
sapply(c("a","c"), grepl(x = x))
sapply(c("a","c"), grepl(x = x, pattern = c("a","c")))
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
x[x %like% "x"]
grepl("x", x)
x[x %like% "x"]
x[x %like% "x"]
x %like% "c"
x %like% "x"
(x %like% "x")[F]
(x %like% "x")[T
]
(x %like% "x")[T]
(x %like% "x")[F]
length((x %like% "x")[F]))
length((x %like% "x")[F])
length((x %like% "x")[T])
`%like%` <- function(vec, str) {
logret <- grepl(str, vec)
if (length(logret[F]) == 0) return NULL
logret
}
`%like%` <- function(vec, str) {
logret <- grepl(str, vec)
if (length(logret[F]) == 0) {return(NULL)}
return(logret)
}
x[x %like% "c"]
x %like% "c"
`%like%` <- function(vec, str) {
logret <- grepl(str, vec)
if (length(logret[T]) == 0) {return(NULL)}
return(logret)
}
x %like% "c"
x[x %like% "c"]
x[x %like% "x"] %||% "nothing found"
`%||%` <- function(a, b) if (!is.null(a)) a else b
x[x %like% "x"] %||% "nothing found"
x[x %like% "x"
]
(x %like% "x")
`%like%` <- function(vec, str) {
logret <- grepl(str, vec)
print(length(logret[T]))
if (length(logret[T]) == 0) {return(NULL)}
return(logret)
}
(x %like% "x")
`%like%` <- function(vec, str) {
logret <- grepl(str, vec)
print(length(logret[F]))
if (length(logret[T]) == 0) {return(NULL)}
return(logret)
}
(x %like% "x")
(x %like% "c")
`second<-` <- function(x, value) {
x[2] <- value
x
}
x <- 1:10
address(x0)
install.packages("pryr")
library(pryr)
pryr::address(x)
second(x) <- 5L
pryr::address(x)
f1 <- function(x) {
invisible(1)
}
f1(3)
(f1(3))
a <- b <- c <- d <- 2
(a <- b <- c <- d <- 2)
f <- function(x) {
x$a <- 2
x
}
x <- list(a = 1)
f(x)
x$a
?scopingOps
?assignOps
dfl <- data.frame(x = 1:3, y = I(list(1:2, 1:3, 1:4)))
dfl
dfl[2][1]
dfl[[2,1]]
dfl[2]
class(dfl[2][1])
dfl[2][1]
class(dfl[[2]][1])
dfl[[2]][1]
class(dfl[[2]][1][1])
dfl[[2]][1][1]
dfl[[2]][[1]][1]
install.packages('Rserve')
install.packages('ggplot2')
install.packages('devtools')
install.packages('RCurl')
install.packages('RJSONIO')
install.packages('jpeg')
install.packages('png')
install.packages('base64enc')
install.packages("psych")
library(psych) #Library that contains helpful PCA functions, such as:
bodies = Harman23.cor$cov #Covariance matrix of 8 physical measurements on 305 girls.
bodies
fa.parallel(bodies, #The data in question.
n.obs = 305, #Since we supplied a covaraince matrix, need to know n.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
bodies = Harman23.cor$cov #Covariance matrix of 8 physical measurements on 305 girls.
bodies
fa.parallel(bodies, #The data in question.
n.obs = 305, #Since we supplied a covaraince matrix, need to know n.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
abline(h = 1) #Adding a horizontal line at 1.
fa.parallel(bodies, #The data in question.
n.obs = 305, #Since we supplied a covaraince matrix, need to know n.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
abline(h = 1) #Adding a horizontal line at 1.
pc_bodies = principal(bodies, #The data in question.
nfactors = 2, #The number of PCs to extract.
rotate = "none")
pc_bodies
factor.plot(pc_bodies,
labels = colnames(bodies)) #Add variable names to the plot.
iris_meas = iris[, -5] #Measurements of iris dataset.
iris_meas
plot(iris_meas)
fa.parallel(iris_meas, #The data in question.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
abline(h = 1) #Adding a horizontal line at 1.
pc_iris = principal(iris_meas, #The data in question.
nfactors = 2,
rotate = "none") #The number of PCs to extract.
pc_iris
cov(iris)
var(iris)
var(iris[,1:4])
cor(iris[,1:4])
plot(iris_meas) #Original data: 4 dimensions.
plot(pc_iris$scores) #Projected data: 2 dimensions.
factor.plot(pc_iris,
labels = colnames(iris_meas)) #Add variable names to the plot.
library(Sleuth2)
install.packages("Sleuth2")
library(Sleuth2)
fa.parallel(printer_data, #The data in question.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
abline(h = 1) #Adding a horizontal line at 1.
#Should extract 1 PC, but let's look at 3.
fa.parallel(printer_data, #The data in question.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
abline(h = 1) #Adding a horizontal line at 1.
#Should extract 1 PC, but let's look at 3.
pc_printer = principal(printer_data, #The data in question.
nfactors = 3,
rotate = "none") #The number of PCs to extract.
library(Sleuth2)
case1701
printer_data = case1701[, 1:11]
fa.parallel(printer_data, #The data in question.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
abline(h = 1) #Adding a horizontal line at 1.
#Should extract 1 PC, but let's look at 3.
pc_printer = principal(printer_data, #The data in question.
nfactors = 3,
rotate = "none") #The number of PCs to extract.
pc_printer
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
install.packages('shinydashboard')
supressWarnings(library(shinydashboard))
suppressWarnings(library(shinydashboard))
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
?box
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
install.packages('ggmap')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
theme(panel.border = element_rect(fill = NA))
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
legend.position = "bottom", legend.box = "horizontal"
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
display.brewer.all()
library(RColorBrewer)
display.brewer.all()
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
brewer.pal(100, name = "RdYlGn")
brewer.pal(11, name = "RdYlGn")
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
ls(brewer.pal(11, name = "RdYlGn"))
dir(brewer.pal(11, name = "RdYlGn"))
x <- brewer.pal(11, name = "RdYlGn")
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
gvisMotionChart(
gvisMotionChart(
)
;
Df1 <- subset(ICVS.results, Question == 'Police Approval')
Df2 <- subset(ICVS.results, Question == 'Police Approval')
Df.net <- inner_join(Df1, Df2, by = c("Year","Country")) %>%
mutate(Year = as.numeric(Year))
Df.net <- Df.net %>%
rename_(.dots = setNames("Score.x", 'Police Approval')) %>%
rename_(.dots = setNames("Score.y", 'Police Approval')
Df.net
Df.net <- Df.net %>%
rename_(.dots = setNames("Score.x", "Police Approval")) %>%
rename_(.dots = setNames("Score.y", "Police Approval")
Df.net
Df1 <- subset(ICVS.results, Question == 'Police Approval')
Df2 <- subset(ICVS.results, Question == 'Police Approval')
Df.net <- inner_join(Df1, Df2, by = c("Year","Country")) %>%
mutate(Year = as.numeric(Year))
Df.net <- Df.net %>%
rename_(.dots = setNames("Score.x", list("Police Approval"))) %>%
rename_(.dots = setNames("Score.y", "Police Approval")
Df.net
Df1 <- subset(ICVS.results, Question == 'Police Approval')
Df2 <- subset(ICVS.results, Question == 'Police Approval')
Df.net <- inner_join(Df1, Df2, by = c("Year","Country")) %>%
mutate(Year = as.numeric(Year))
Df.net <- Df.net %>%
rename_(.dots = setNames("Score.x", list("Police Approval"))) %>%
rename_(.dots = setNames("Score.y", list("Police Approval"))
Df.net
Df1 <- subset(ICVS.results, Question == 'Police Approval')
Df2 <- subset(ICVS.results, Question == 'Police Approval')
Df.net <- inner_join(Df1, Df2, by = c("Year","Country")) %>%
mutate(Year = as.numeric(Year))
Df.net <- Df.net %>%
rename_(.dots = setNames("Score.x", list("Police Approval"))) %>%
rename_(.dots = setNames("Score.y", list("Police Approval")))
Df.net
MotionChartState <- '{"uniColorForNonSelected":false,"nonSelectedAlpha":0.4,"sizeOption":"_UNISIZE","yLambda":1,"dimensions":{"iconDimensions":["dim0"]},"iconKeySettings":[],"showTrails":false,"yAxisOption":"5","xZoomedDataMax":0.9057777778,"orderedByY":false,"xZoomedDataMin":-0.7565217391,"colorOption":"_UNIQUE_COLOR","orderedByX":false,"playDuration":15000,"xZoomedIn":false,"duration":{"timeUnit":"Y","multiplier":1},"xLambda":1,"yZoomedIn":false,"iconType":"BUBBLE","yZoomedDataMax":3.456594324,"time":"1992","yZoomedDataMin":1.834181818,"xAxisOption":"3"}'
gvisMotionChart(
data = Df.net,
idvar = "Country",
timevar = "Year",
xvar = 'Police Approval',
yvar = "Police Approval",
options = list(state = MotionChartState)
)
gv <- gvisMotionChart(
data = Df.net,
idvar = "Country",
timevar = "Year",
xvar = 'Police Approval',
yvar = "Police Approval",
options = list(state = MotionChartState)
)
plot(gv)
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
shiny::runApp('Documents/Learning/NYC-DSA/Project 2/policingShiny')
P00100.Info <- data.frame(Id = "P00100", Title = "Police Approval",
FullText = "SENTIMENT - Taking everything into account, how good do you think the police in your area are in controlling crime? Do you think they do a good job or not?",
Min = -1, Max = 1, marks = I(list(c(-1,0,1))),
labels = I(list(c("Disapprove","","Approve"))))
S0020.Info <- data.frame(Id = "S0020", Title = "Safe At Night",
FullText = "SENTIMENT - How safe do you feel walking alone in your area after dark? Do you feel very safe, fairly safe, a bit unsafe, or very unsafe?",
Min = 1, Max = 4, marks = I(list(c(1,2,3,4))),
labels = I(list(c("Very unsafe","Bit unsafe","Fairly safe","Very safe"))))
S0040.Info <- data.frame(Id = "S0040", Title = "Chance of Break-In",
FullText = "SENTIMENT - What would you say are the chances that over the next twelve months someone will try to break into your home? Do you think this is very likely, likely or not likely?",
Min = 1, Max = 3, marks = I(list(c(1,2,3))),
labels = I(list(c("Very likely","Likely","Not likely"))))
C01B400.Info <- data.frame(Id = "C01B400", Title = "Car Theft",
FullText = "REPORT TO POLICE - Over the past five years have you or other members of your household had any of their cars/vans/trucks stolen? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C03B400.Info <- data.frame(Id = "C03B400", Title = "Car Vandalism",
FullText = "REPORT TO POLICE - Apart from thefts, have parts of any of the cars/vans/trucks belonging to your household been deliberately damaged (vandalized) over the past five years? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C04B400.Info <- data.frame(Id = "C04B400", Title = "Theft of Motorcycle",
FullText = "REPORT TO POLICE -  the past five years have you or other members of your household had any of their mopeds/scooters/motorcycles stolen? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C06B400.Info <- data.frame(Id = "C06B400", Title = "Burglary",
FullText = "REPORT TO POLICE - Over the past five years, did anyone actually get into your house or flat without permission and steal or try to steal something? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C09B400.Info <- data.frame(Id = "C09B400", Title = "Robbery",
FullText = "REPORT TO POLICE - Over the past five years has anyone taken something from you, by using force, or threatening you? Or did anyone try do to so? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C11B400.Info <- data.frame(Id = "C11B400", Title = "Sexual Offenses",
FullText = "REPORT TO POLICE - People sometimes grab, touch or assault others for sexual reasons in a really offensive way. This can happen either at home or elsewhere, for instance in a pub, the street, at school, on public transport, in cinemas, on the beach or at one's workplace. Over the past five years has anyone done this to you? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C12B400.Info <- data.frame(Id = "C12B400", Title = "Assault",
FullText = "REPORT TO POLICE - Apart from the incidents just covered, have you over the past five years been personally attacked or threatened by someone in a way that really frightened you either at home or elsewhere, such as in a pub, in the street, at school, on public transport, on the beach, or at your workplace? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C13B400.Info <- data.frame(Id = "C13B400", Title = "Consumer Fraud",
FullText = "REPORT TO POLICE - Last year, were you the victim of a consumer fraud? In other words, has someone when selling something to you or delivering a service cheated you in terms of quantity or quality of the goods/service? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C02B400.Info <- data.frame(Id = "C02B400", Title = "Theft from Car",
FullText = "REPORT TO POLICE - Over the past five years have you or have members of your household been the victim of a theft of a car radio, or something else which was left in your car, or theft of a part of the car, such as a car mirror or wheel? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
C05B400.Info <- data.frame(Id = "C05B400", Title = "Bicycle Theft",
FullText = "REPORT TO POLICE - Over the past five years have you or other members of your household had any of their bicycles stolen? If so, did you or anyone else report the incident to the police?",
Min = 0, Max = 1, marks = I(list(c(0,0.5,1))),
labels = I(list(c("0% Reported","50%  Reported", "100%  Reported"))))
QuestionMap <- rbind(P00100.Info, S0020.Info, S0040.Info, C11B400.Info, C09B400.Info, C06B400.Info, C04B400.Info,
C03B400.Info, C01B400.Info, C12B400.Info, C13B400.Info, C05B400.Info, C02B400.Info)
setwd('~/Documents/Learning/NYC-DSA/Project 2/policingShiny')
saveRDS(QuestionMap, "datasets/QuestionMap.RDS")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?dashboardHeader
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
